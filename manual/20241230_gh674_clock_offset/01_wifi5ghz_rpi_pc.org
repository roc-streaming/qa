#+OPTIONS: toc:nil
#+TOC: headlines 1

* SECTION Test summary

** Environment

- *Devices*
  - Sender: RPi4 (=arm32=)
  - Receiver: PC (=x86_64=)

- *Network*
  - Wi-Fi 5GHz

- *Ping*
  - below 3ms
  
** Info

- *Git revisions*

   #+begin_src shell :results verbatim
     cd ~/dev/roc-streaming/roc-toolkit && git log -1 --format=short
   #+end_src

   #+results:
   : commit 5e8528929835d8c8844ce3fd020047373488e6ab
   : Author: Mikhail Baranov <baranov.mv@gmail.com>
   : 
   :     Slot provides Control endpoints ts

   #+begin_src shell :results verbatim
     cd ~/dev/roc-streaming/csvplotter && git log -1 --format=short
   #+end_src

   #+results:
   : commit 1ef0a47962b9071c2cc76175c59179ddf7895d12
   : Author: Mikhail Baranov <baranov.mv@gmail.com>
   : 
   :     plot t1-t4 stats

- *Estimate clock offset*

   Rough difference between unix time on two machines.

   #+begin_src shell :results verbatim
     ssh raspberrypi-4b.lan "date -u +%s" | awk -v local="$(date -u +%s)" '{print local - $1}'
   #+end_src

   #+results:
   : 11747389

- *Estimate ping*

   #+begin_src shell :results verbatim
     ping -c 5 raspberrypi-4b.lan
   #+end_src

   #+results:
   #+begin_example
   PING raspberrypi-4b.lan (192.168.0.141) 56(84) bytes of data.
   64 bytes from raspberrypi-4b.lan (192.168.0.141): icmp_seq=1 ttl=64 time=3.52 ms
   64 bytes from raspberrypi-4b.lan (192.168.0.141): icmp_seq=2 ttl=64 time=3.45 ms
   64 bytes from raspberrypi-4b.lan (192.168.0.141): icmp_seq=3 ttl=64 time=3.29 ms
   64 bytes from raspberrypi-4b.lan (192.168.0.141): icmp_seq=4 ttl=64 time=1.90 ms
   64 bytes from raspberrypi-4b.lan (192.168.0.141): icmp_seq=5 ttl=64 time=3.40 ms

   --- raspberrypi-4b.lan ping statistics ---
   5 packets transmitted, 5 received, 0% packet loss, time 4005ms
   rtt min/avg/max/mdev = 1.898/3.109/3.516/0.610 ms
   #+end_example

** Running

- *stop ntpd*

   #+begin_example
   sudo systemctl stop ntp
   #+end_example

- *run roc-send*

   #+begin_example
   ./roc-send -vv -s rtp+rs8m://dell-xps15.lan:10001 -r rs8m://dell-xps15.lan:10002 -c rtcp://dell-xps15.lan:10003 -i file:long.wav
   #+end_example

- *run roc-recv*

   #+begin_example
   ./roc-recv -vv -s rtp+rs8m://0.0.0.0:10001 -r rs8m://0.0.0.0:10002 -c rtcp://0.0.0.0:10003 -o file:test.wav --dump test.csv
   #+end_example

- *run csvplotter*

   #+begin_example
   python3 ./csvplotter.py test.csv
   #+end_example


* SECTION Setup code

#+transclude: [[file:setup.org]]

#+begin_src ipython :session
  data = load_csv('01_wifi5ghz_rpi_pc.csv')
#+end_src

#+results:
: # Out[78]:


* SECTION Round Trip Time

** Overall

#+begin_src ipython :session :results raw drawer
  plt.plot(data[:,0]/60, data[:,1]*1000)
  plt.legend(['rtt, ms'], labelcolor='linecolor')
  configure_plot()
#+end_src

#+results:
:results:
# Out[58]:
[[file:./obipy-resources/2La0G7.png]]
:end:

** Zoomed

#+begin_src ipython :session :results raw drawer
  plt.plot(data[550:600,0]/60, data[550:600,1]*1000)
  plt.legend(['rtt, ms'], labelcolor='linecolor')
  configure_plot()
#+end_src

#+results:
:results:
# Out[46]:
[[file:./obipy-resources/dTx736.png]]
:end:

** Statistics

#+begin_src ipython :session :results output verbatim
  print_stats("RTT", data[:,1])
  print_jitter("RTT", data[:,1])
#+end_src

#+results:
#+begin_example
RTT statistics:
  min:  1.957 ms
  max:  4.449 ms
  avg:  2.509 ms
  p95:  2.994 ms
  
RTT jitter:
  min:  0.000 ms
  max:  2.028 ms
  avg:  0.068 ms
  p95:  0.269 ms
  
#+end_example


* SECTION Clock Offset

** Overall

#+begin_src ipython :session :results raw drawer
  plt.plot(data[:,0]/60, data[:,2], 'C5')
  plt.legend(['clock_offset, sec'], labelcolor='linecolor')
  configure_plot()
#+end_src

#+results:
:results:
# Out[48]:
[[file:./obipy-resources/eqCn0S.png]]
:end:

** Zoomed

#+begin_src ipython :session :results raw drawer
  plt.plot(data[550:600,0]/60, data[550:600,2]*1000, 'C5')
  plt.legend(['clock_offset, ms'], labelcolor='linecolor')
  configure_plot()
#+end_src

#+results:
:results:
# Out[53]:
[[file:./obipy-resources/fJry6b.png]]
:end:

** Statistics

#+begin_src ipython :session :results output verbatim
  print_drift("Clock offset", data[:,0], data[:,2])
  print_jitter("Clock offset", data[:,2])
#+end_src

#+results:
#+begin_example
Clock offset drift:
  0.000016 sec/sec
  1.418 sec/day
  
Clock offset jitter:
  min:  0.000 ms
  max:  0.376 ms
  avg:  0.005 ms
  p95:  0.017 ms
  
#+end_example
