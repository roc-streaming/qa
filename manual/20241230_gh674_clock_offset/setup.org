#+BEGIN_EXPORT html
<details>
  <summary>Click to expand</summary>
#+END_EXPORT

#+BEGIN_SRC ipython :session :results none
  %matplotlib inline
  import matplotlib.pyplot as plt
  import matplotlib.ticker as ticker
  import numpy as np
  import os
  import subprocess

  plt.rcParams['figure.figsize'] = [20, 10]
  plt.rcParams['figure.dpi'] = 100
  plt.rcParams.update({'font.size': 24})
  plt.style.use(['dark_background'])

  def load_csv(path):
    if os.path.exists(path):
      iterator = open(path)
    else:
      iterator = (line.decode('utf-8') for line in
                  subprocess.Popen(['xz', '-dc', f'{path}.xz'],
                                   stdout=subprocess.PIPE).stdout)

    lines = []
    for line in iterator:
      if not line.startswith('r,'):
        continue
      lines.append(line.replace('r,', '').strip())

    data = np.genfromtxt(lines, dtype=float, delimiter=',')
    data[:,0] /= 1e9
    data[:,0] -= data[0,0]
    for n in range(1, data.shape[1]):
      data[:,n] /= 1e9

    return data

  def configure_plot():
    ax = plt.gca()
    ax.grid(True)
    ax.ticklabel_format(useOffset=False, style='plain')
    ax.get_yaxis().set_major_formatter(ticker.FuncFormatter(
      lambda x, pos: "{:,.3f}".format(x).replace(",", "'")))

  def print_stats(name, values):
    values = values * 1000
    print("""
  {} statistics:
    min:  {:.3f} ms
    max:  {:.3f} ms
    avg:  {:.3f} ms
    p95:  {:.3f} ms
    """.format(
      name,
      np.min(values),
      np.max(values),
      np.mean(values),
      np.percentile(values, 95)).lstrip())

  def print_jitter(name, values):
    values = values * 1000
    jitter = np.abs(np.diff(np.diff(values)))
    print("""
  {} jitter:
    min:  {:.3f} ms
    max:  {:.3f} ms
    avg:  {:.3f} ms
    p95:  {:.3f} ms
    """.format(
      name,
      np.min(jitter),
      np.max(jitter),
      np.mean(jitter),
      np.percentile(jitter, 95)).lstrip())

  def print_drift(name, tstamps, values):
    tstamp_delta = tstamps[-1] - tstamps[0]
    values_delta = values[-1] - values[0]
    values_drift = values_delta / tstamp_delta
    print("""
  {} drift:
    {:.6f} sec/sec
    {:.3f} sec/day
    """.format(
      name,
      values_drift,
      values_drift * 60 * 60 * 24).lstrip())
#+END_SRC

#+BEGIN_EXPORT html
</details>
#+END_EXPORT
