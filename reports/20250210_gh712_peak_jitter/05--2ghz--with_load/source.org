# -*- org-export-with-todo-keywords: nil; org-export-use-babel: t; org-edit-src-content-indentation: 2; org-src-preserve-indentation: nil; org-babel-results-keyword: "results"; org-image-actual-width: 1100; org-make-toc-insert-custom-ids: t; org-pandoc-format-extensions: (markdown_github+pipe_tables+raw_html); -*-
#+PROPERTY: HEADER-ARGS                 :eval never-export
#+PROPERTY: HEADER-ARGS:shell           :shebang /bin/bash :prologue "echo '# OUTPUT:'"
#+PROPERTY: HEADER-ARGS:jupyter-python  :session 20241230--05--2ghz--with_load
#+EXPORT_FILE_NAME: report
#+OPTIONS: toc:nil
#+OPTIONS: tags:nil

* HEADING TEST =05--2ghz--with_load=                                :noipynb:
  :PROPERTIES:
  :TOC:      :include siblings :depth 1 :ignore this
  :END:

*Table of contents:*

:CONTENTS:
- [[#test-summary][Test summary]]
- [[#test-bench][Test bench]]
- [[#library-code][Library code]]
- [[#jitter-meter][Jitter Meter]]
- [[#latency-tuner][Latency Tuner]]
- [[#depacketizer][Depacketizer]]
- [[#jitter--niq--losses][Jitter + Niq + Losses]]
:END:

* SECTION Test summary                                              :noipynb:
  :PROPERTIES:
  :CUSTOM_ID: test-summary
  :END:

*Test group:* =20250210_gh712_peak_jitter= Testing peak jitter calculation.

*Test:* =05--2ghz--with_load= 2GHz Wi-Fi link, simulated network load.

*Date:*

#+begin_src shell :results drawer :exports results :prologue ""
  date "+%a %d %b %Y"
#+end_src

#+results:
:results:
Thu 13 Feb 2025
:end:

*Artifacts:*

| *name*        | *link*            |
|---------------+-------------------|
| receiver dump | [[file:roc_recv.csv.xz][=roc_recv.csv.xz=]] |
| receiver log  | [[file:roc_recv.log.xz][=roc_recv.log.xz=]] |
| sender log    | [[file:roc_send.log.xz][=roc_send.log.xz=]] |

*Jupyter notebook:*

[[file:report.ipynb][=report.ipynb=]]

* SECTION Test bench                                                :noipynb:
  :PROPERTIES:
  :CUSTOM_ID: test-bench
  :END:

** Hardware info

- *Network*
  - Wi-Fi 2GHz
  - 1 sender connected to 1 receiver via AP

- *Devices*

  | Role     | Model          | Hostname             | Arch      |
  |----------+----------------+----------------------+-----------|
  | sender   | OrangePi Lite2 | =orangepi-lite2.lan= | =aarch64= |
  | receiver | PC             | =dell-xps15.lan=     | =x86_64=  |

** Software info

- *git revisions*

   #+begin_src shell :results verbatim :exports both :dir ~/dev/roc-streaming
     cd roc-toolkit && git log -1 --format=short
   #+end_src

   #+results:
   : # OUTPUT:
   : commit a02a89458df136c7dc7585e1f25a7ae1a722afd3
   : Author: Victor Gaydov <victor@enise.org>
   :
   :     scripts: Fixes in rgh.py

   #+begin_src shell :results verbatim :exports both :dir ~/dev/roc-streaming
     cd csvplotter && git log -1 --format=short
   #+end_src

   #+results:
   : # OUTPUT:
   : commit 76e75481d818663166396b03ccc39687fd0a2d1a
   : Author: Victor Gaydov <victor@enise.org>
   :
   :     Add DepacketizerPlotter

- *roc-toolkit version*

   #+begin_src shell :results verbatim :exports both
     roc-recv --version
   #+end_src

   #+results:
   : # OUTPUT:
   : roc-recv 0.4.0 (b2798abb92)

   #+begin_src shell :results verbatim :exports both
     ssh orangepi-lite2.lan ./roc/roc-send --version
   #+end_src

   #+results:
   : # OUTPUT:
   : roc-send 0.4.0 (b2798abb92)

- *iperf version*

   #+begin_src shell :results verbatim :exports both
     iperf3 --version
   #+end_src

   #+results:
   : # OUTPUT:
   : iperf 3.12 (cJSON 1.7.15)
   : Linux dell-xps15 6.1.0-28-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.119-1 (2024-11-22) x86_64
   : Optional features available: CPU affinity setting, IPv6 flow label, SCTP, TCP congestion algorithm setting, sendfile / zerocopy, socket pacing, authentication, bind to device, support IPv4 don't fragment

   #+begin_src shell :results verbatim :exports both
     ssh orangepi-lite2.lan iperf3 --version
   #+end_src

   #+results:
   : # OUTPUT:
   : Linux opi-l2 3.10.65 #5 SMP PREEMPT Sat Mar 10 14:57:32 CST 2018 aarch64 aarch64 aarch64 GNU/Linux
   : iperf 3.0.11

** Configuration

Sender streams to receiver during ~10 minutes.

Protocols:

| Endpoint | Protocol      |
|----------+---------------|
| source   | =rtp+rs8m://= |
| repair   | =rs8m://=     |
| control  | =rtcp://=     |

Sender options:

| Option              | Value   |
|---------------------+---------|
| =--packet-encoding= | pcm@s16 |
| =--packet-len=      | 5 ms    |
| =--fec-encoding=    | rs8m    |
| =--fec-block-src=   | 18      |
| =--fec-block-rpr=   | 10      |

Receiver options:

| Option                  | Value      |
|-------------------------+------------|
| =--plc=                 | *beep*     |
| =--resampler-backend=   | builtin    |
| =--resampler-profile=   | medium     |
| =--target-latency=      | adaptive   |
| =--latency-tolerance=   | *15000 ms* |
| =--start-latency=       | 200 ms     |
| =--min-latency=         | 15 ms      |
| =--max-latency=         | 1000 ms    |
| =--latency-backend=     | niq        |
| =--latency-profile=     | gradual    |
| =--no-play-timeout=     | *15000 ms* |
| =--choppy-play-timeout= | 2000 ms    |

** Instructions

- *run roc-send*

   On sender (=orangepi-lite2.lan=):

   #+begin_example
   reclog -o roc_send.log ./roc/roc-send -vv -s rtp+rs8m://dell-xps15.lan:10001 -r rs8m://dell-xps15.lan:10002 -c rtcp://dell-xps15.lan:10003 -i file:long.wav
   #+end_example

- *run roc-recv*

   On receiver (=dell-xps15.lan=):

   #+begin_example
   reclog -o roc_recv.log roc-recv -vv -s rtp+rs8m://0.0.0.0:10001 -r rs8m://0.0.0.0:10002 -c rtcp://0.0.0.0:10003 --plc beep --latency-tolerance 15s --no-play-timeout 15s --dump roc_recv.csv
   #+end_example

   Note =--latency-tolerance= and =--no-play-timeout= options to avoid session restarts on burst losses.

- *run iperf server*

   On sender (=orangepi-lite2.lan=):

   #+begin_example
   iperf3 -s
   #+end_example

- *run iperf client to simulate load*

   On receiver (=dell-xps15.lan=):

   #+begin_example
   iperf3 -c orangepi-lite2.lan --bitrate 10M --time 60 --udp --reverse
   #+end_example

   This will generate 10 Mbits/sec UDP traffic from sender (server) to receiver (client) during 60 seconds. We start iperf 1 minute till benchmark start, and it ends 2 minutes till benchmark start.

   This period is highlighted with red background on plots.

- *run csvplotter*

   On receiver (=dell-xps15.lan=):

   #+begin_example
   csvplotter.py roc_recv.csv
   #+end_example

** Precheck

- *ping without load*

   #+begin_src shell :results verbatim :exports both
     ping -q -i 0.002 -c 1000 orangepi-lite2.lan
   #+end_src

   #+results:
   : # OUTPUT:
   : PING orangepi-lite2.lan (192.168.0.140) 56(84) bytes of data.
   : 
   : --- orangepi-lite2.lan ping statistics ---
   : 1000 packets transmitted, 1000 received, 0% packet loss, time 8134ms
   : rtt min/avg/max/mdev = 1.689/14.287/104.542/14.143 ms, pipe 11

- *ping with load*

   #+begin_src shell :results verbatim :exports both
     ping -q -i 0.002 -c 1000 orangepi-lite2.lan
   #+end_src

   #+results:
   : # OUTPUT:
   : PING orangepi-lite2.lan (192.168.0.140) 56(84) bytes of data.
   : 
   : --- orangepi-lite2.lan ping statistics ---
   : 1000 packets transmitted, 1000 received, 0% packet loss, time 8363ms
   : rtt min/avg/max/mdev = 2.063/27.646/320.024/42.302 ms, pipe 32

* SECTION Library code
  :PROPERTIES:
  :CUSTOM_ID: library-code
  :END:

#+begin_export markdown
<details>
  <summary>Click to expand</summary>
#+end_export

#+transclude: [[file:../library.py]]  :src jupyter-python :rest ":results none"

#+begin_export markdown
</details>
#+end_export

#+begin_src jupyter-python :exports both
  data = load_csv('roc_recv.csv')
  data.keys()
#+end_src

#+results:
: dict_keys(['m', 'd', 't', 'f'])

* SECTION Jitter Meter
  :PROPERTIES:
  :CUSTOM_ID: jitter-meter
  :END:

** Plot

#+begin_src jupyter-python :exports both
  plt.plot(data['m'][:,0]/60, data['m'][:,2], 'C4')
  plt.plot(data['m'][:,0]/60, data['m'][:,3]/1e6, 'C5')
  plt.plot(data['m'][:,0]/60, data['m'][:,4]/1e6, 'C8')
  plt.legend(['jitter, ms', 'peak_jitter, ms', 'envelope, ms'],
             labelcolor='linecolor', bbox_to_anchor=(1, -0.1))
  plt.axvspan(1.0, 2.0, color='C3', alpha=0.2)
  configure_plot()
#+end_src

#+attr_html: :width 700
#+results:
[[file:./.ob-jupyter/ac34511364abbf11f4e5ceffa9f40e520bb8eaa1.png]]

** Statistics

#+begin_src jupyter-python :exports both
  format_tables(stats_table('jitter', data['m'][:,2]),
                stats_table('peak-jitter', data['m'][:,3]/1e6))
#+end_src

#+results:
|       | *jitter*   | *peak-jitter* |
|-------+------------+---------------|
| *min* | 0.437 ms   | 5.010 ms      |
| *max* | 474.718 ms | 474.712 ms    |
| *avg* | 7.122 ms   | 369.859 ms    |
| *p95* | 16.302 ms  | 474.712 ms    |

* SECTION Latency Tuner
  :PROPERTIES:
  :CUSTOM_ID: latency-tuner
  :END:

** Plot

#+begin_src jupyter-python :exports both
  plt.plot(data['t'][:,0]/60, data['t'][:,1]/44100*1e3, 'gray')
  plt.plot(data['t'][:,0]/60, data['t'][:,2]/44100*1e3, 'C5*-')
  plt.legend(['niq_latency, ms', 'target_latency, ms'],
             labelcolor='linecolor', bbox_to_anchor=(1, -0.1))
  plt.axvspan(1.0, 2.0, color='C3', alpha=0.2)
  configure_plot()
#+end_src

#+attr_html: :width 700
#+results:
[[file:./.ob-jupyter/071edec138b5ef8e66092d3c2f4fc84e203c1826.png]]

** Statistics

#+begin_src jupyter-python :exports both
  format_tables(stats_table('niq-latency', data['t'][:,1]/44100*1e3),
                stats_table('target-latency', data['t'][:,2]/44100*1e3))
#+end_src

#+results:
|       | *niq-latency* | *target-latency* |
|-------+---------------+------------------|
| *min* | -814.014 ms   | 217.687 ms       |
| *max* | 872.698 ms    | 837.052 ms       |
| *avg* | 694.094 ms    | 706.139 ms       |
| *p95* | 852.834 ms    | 837.052 ms       |

  :PROPERTIES:
  :CUSTOM_ID: depacketizer
  :END:

* SECTION Depacketizer
  :PROPERTIES:
  :CUSTOM_ID: depacketizer
  :END:

** Plot

#+begin_src jupyter-python :exports both
  plot_bars(data['d'][:-1,0]/60, np.diff(data['d'][:,1]/44100*1e3), offset=0, color='C3')
  plot_bars(data['d'][:-1,0]/60, np.diff(data['d'][:,2]/44100*1e3), offset=1, color='C4')
  plot_bars(data['d'][:-1,0]/60, np.diff(data['d'][:,3]/44100*1e3), offset=2, color='C6')
  plt.legend(['missing samples, ms', 'late samples, ms', 'recovered samples, ms'],
             labelcolor='linecolor', bbox_to_anchor=(1, -0.1))
  plt.axvspan(1.0, 2.0, color='C3', alpha=0.2)
  configure_plot()
#+end_src

#+attr_html: :width 700
#+results:
[[file:./.ob-jupyter/1a6f91008d1407facb7ee3ae4354c9e30c5228a4.png]]

#+attr_html: :width 700
#+results:

* SECTION Jitter + Niq + Losses
  :PROPERTIES:
  :CUSTOM_ID: jitter--niq--losses
  :END:

This plot shows three metrics from the above sections combined into one:

- network incoming queue (niq) spikes (sudden decreasements of NIQ len, in milliseconds)
- current jitter (measured from RTS)
- peak jitter (calculated from jitter)
- missing samples (unrecovered losses, how many samples were missing and replaced with zeros)

On the plot we can see that a few times the following happened:

- we got some unrecovered losses (red bar)
- we got high NIQ spike (yellow dot) that is above both jitter (blue line) and peak jitter (orange line)
- but jitter was lower than peak jiter, so there were no reaction to this

#+begin_src jupyter-python :exports both
  # niq spikes
  niq_window = 100
  niq_spikes = data['t'][:,1]/44100*1e3
  niq_spikes = niq_spikes[:len(niq_spikes)//niq_window*niq_window]
  niq_spikes = np.repeat(np.amin(niq_spikes.reshape(-1, niq_window), axis=1), niq_window)
  niq_spikes = np.abs(np.diff(niq_spikes))
  plt.plot(data['t'][:len(niq_spikes),0]/60, niq_spikes, 'C1*')
  # jitter
  plt.plot(data['m'][:,0]/60, data['m'][:,2], 'C4')
  # peak jitter
  plt.plot(data['m'][:,0]/60, data['m'][:,3]/1e6, 'C5')
  # missing samples
  plot_bars(data['d'][:-1,0]/60, -np.diff(data['d'][:,1]/44100*1e2), color='C3')
  plt.legend(['niq spikes, ms', 'jitter, ms', 'peak jitter, ms', 'missing samples, ms'],
             labelcolor='linecolor', bbox_to_anchor=(1, -0.1))
  plt.axvspan(1.0, 2.0, color='C3', alpha=0.2)
  configure_plot()
#+end_src

#+attr_html: :width 700
#+results:
[[file:./.ob-jupyter/ed2d9eb526c6a270eb8574e00dd7e9baf0ac7d77.png]]
